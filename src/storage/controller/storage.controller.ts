import { Body, Post, UseFilters } from '@nestjs/common';
import { CommandBus, QueryBus } from '@nestjs/cqrs';
import { ControllerApp } from '../../core/decorators/controller-apitag.decorators';
import { PostMeasurementeCommand } from '../domain/command/post-measurement.command';
import { CreateRequestMeasurementDto } from '../../measurement/domain/dtos/create-request-measurement.dto';
import { ValidationExceptionFilter } from '../../core/exceptionFilter/bad-request-exception.filter';
import { ApiBody, ApiResponse } from '@nestjs/swagger';
import { CustomErrorResponse } from 'src/utils/error-response.dto';

@ControllerApp('/', '')
@UseFilters(new ValidationExceptionFilter())
export class StorageController {
  constructor(
    private readonly commandBus: CommandBus,
    private readonly queryBus: QueryBus,
  ) {}

  @Post('upload')
  @ApiResponse({
    status: 400,
    description: 'Bad Request',
    type: CustomErrorResponse,
  })
  @ApiResponse({
    status: 500,
    description: 'Internal Server Error',
    type: CustomErrorResponse,
  })
  @ApiBody({
    description: 'Create a new measurement',
    type: CreateRequestMeasurementDto,
    examples: {
      a: {
        summary: 'Example with WATER type',
        value: {
          image:
            '',
          customer_code: '12345',
          measure_datetime: '2024-08-30T12:34:56Z',
          measure_type: 'WATER',
        },
      },
      b: {
        summary: 'Example with GAS type',
        value: {
          image: 'anotherbase64encodedimagestring',
          customer_code: '67890',
          measure_datetime: '2024-08-30T12:34:56Z',
          measure_type: 'GAS',
        },
      },
    },
  })
  async uploadMeasurement(
    @Body() createMeasurementDto: CreateRequestMeasurementDto,
  ) {
    return await this.commandBus.execute(
      new PostMeasurementeCommand(createMeasurementDto),
    );
  }
}
